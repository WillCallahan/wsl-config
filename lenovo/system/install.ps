# WSL2 Installation
# See https://docs.microsoft.com/en-us/windows/wsl/install-win10

Write-Host 'Installing WSL 2 (Requires Restart to continue to step 2)' -ForegroundColor yellow

dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart

$kernelUpdateUrl="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"
Invoke-WebRequest -Uri $url -OutFile ~/Downloads/wsl_update_x64.msi

# Choco Installation Packages
Write-Host 'Installing Choco' -ForegroundColor yellow

Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

choco upgrade chocolatey

# SDKs
choco install -y python3
choco install -y dotnetcore-sdk
choco install -y nodejs
choco install -y openjdk
choco install -y maven
choco install -y lein

# Version Control
choco install -y git

# IDEs
choco install -y jetbrainstoolbox
choco install -y R.Studio
choco install visualstudio2019community

# VPN
choco install -y viscosity

# DBMS Clients
choco install -y sql-server-management-studio
choco install -y sqlsearch
choco install -y mysql-cli

# Docker
choco install -y docker
choco install -y docker-desktop
choco install -y docker-compose

choco install -y awscli
choco install -y visualstudio2019buildtools

choco install -y sublimetext3

choco install -y adobe-creative-cloud

choco install -y slack
choco install -y keybase
choco install -y discord

choco install -y steam

choco install -y wireguard



# Certificate Installation
Write-Output "Installing nexus certificates"

$webRequest = [Net.WebRequest]::Create("https://nexus.i.callahanwilliam.com/")
try {
    $webRequest.GetResponse()
} catch {
    Write-Error "Failed to get certificate from $webRequest"
}
$cert = $webRequest.ServicePoint.Certificate
$bytes = $cert.Export([Security.Cryptography.X509Certificates.X509ContentType]::Cert)
set-content -value $bytes -encoding byte -path "${env:USERPROFILE}\AppData\Local\Temp\nexus.i.callahanwilliam.com.cer"

Import-Certificate -FilePath "${env:USERPROFILE}\AppData\Local\Temp\nexus.i.callahanwilliam.com.cer" -CertStoreLocation 'Cert:\LocalMachine\Root' -Verbose  -WhatIf

Write-Output "Please enter the keytool password (default: changeit)..."
keytool -import -alias nexus -keystore "${env:JAVA_HOME}\lib\security\cacerts" -file "${env:USERPROFILE}\AppData\Local\Temp\nexus.i.callahanwilliam.com.cer"



# Application Installation Configuration
npm config set registry 'https://nexus.i.callahanwilliam.com/repository/npm-proxy/'
npm config set strict-ssl false

pip config --user set global.index https://nexus.i.callahanwilliam.com/repository/pypi-proxy/pypi
pip config --user set global.index-url https://nexus.i.callahanwilliam.com/repository/pypi-proxy/simple
pip config --user set global.trusted-host nexus.i.callahanwilliam.com

If(!(Test-Path "${Home}\.m2"))
{
      New-Item -ItemType Directory -Force -Path "${Home}\.m2"
}

Write-Output '<settings xmlns="http://maven.apache.org/SETTINGS/1.1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">

  <servers>
    <server>
      <id>nexus-snapshots</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
    <server>
      <id>nexus-releases</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
  </servers>

  <mirrors>
    <mirror>
      <id>central</id>
      <name>central</name>
      <url>https://nexus.i.callahanwilliam.com/repository/maven-public/</url>
      <mirrorOf>*</mirrorOf>
    </mirror>
  </mirrors>

</settings>
' | Out-File "${Home}\.m2\settings.xml"
